// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  password      String?
  avatar        String?
  metasCriadas  Meta[]         @relation("CriadorMeta")
  participacoes Participante[]
  parcelas      Parcela[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Meta {
  id               String         @id @default(cuid())
  titulo           String
  descricao        String?
  categoria        String
  valorTotal       Float
  valorParcela     Float
  numParcelas      Int
  recorrente       Boolean        @default(false)
  frequencia       String?
  intervalo        Int?
  diaVencimento    Int?
  diaSemana        String?
  horario          String?
  dataInicio       DateTime
  dataFim          DateTime?
  numExecucoes     Int?
  distribuicaoTipo String         @default("igual")
  valorMinParcela  Float?
  valorMaxParcela  Float?
  usuarioCriadorId String
  usuarioCriador   User           @relation("CriadorMeta", fields: [usuarioCriadorId], references: [id])
  participantes    Participante[]
  parcelas         Parcela[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Participante {
  id         String   @id @default(cuid())
  metaId     String
  meta       Meta     @relation(fields: [metaId], references: [id], onDelete: Cascade)
  usuarioId  String
  usuario    User     @relation(fields: [usuarioId], references: [id])
  percentual Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([metaId, usuarioId])
}

model Parcela {
  id             String    @id @default(cuid())
  metaId         String
  meta           Meta      @relation(fields: [metaId], references: [id], onDelete: Cascade)
  numero         Int
  valor          Float
  dataVencimento DateTime
  status         String    @default("Pendente")
  valorPago      Float?
  responsavelId  String
  responsavel    User      @relation(fields: [responsavelId], references: [id])
  dataPagamento  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([metaId, numero, responsavelId])
}
